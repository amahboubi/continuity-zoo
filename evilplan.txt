Current insights: 
- Continuity Axiom stating CA: forall (Q A R : Type), forall (F : (Q -> A) -> R), dialogue_continuous F is inconsistent, even if dialogue_continuous is squashed in Prop. Reason: CA implies classical logic (see Martin's PhD), and classical logic implies that GBI for Q := nat -> bool and A := nat is inconsistent. Finally, CA implies GBI.
- Continuity Axiom stating CA: forall (Q A R : retractions_of_nat), forall (F : (Q -> A) -> R), dialogue_continuous F implies Markov's principle. Funny, knowing that almost the same model that allows to prove continuity of all functions (nat -> nat) -> nat also provides negation of Markov's principle (see Coquand-Manaa 2017)
- Bar Induction implies that sequential continuity <-> dialogue continuity when the question type Q is nat. However, for more complex types, we may end up with three distinct notions, each stronger than the previous one :
	• sequential continuity
	• sequential continuity where the extensional tree is inductively barred
	• dialogue continuity
In particular, Brede-Herbelin's GBI, even when we try to fix it, does not allow to recover dialogue continuity from sequential continuity in general.
This leads to the following question: could we not simply state our own version of GBI, its conclusion being not an inductive predicate but the existence of a dialogue tree computing the predicate ? Something like:
MadeUpGBI := forall (P : list (Q * A) -> Prop), ABbarred P -> exists d : dialogue Q A R, d realizes P
for a good notion of "realizes".

Things to understand:
- Kawai c-BI axiom, which supposedly implies equivalence of modulus continuity and dialogue continuity.

Things to discuss with Hugo:
- why do they monotonise the predicate on the fly when defining GBI? It stops us from proving BI + we cannot talk about decidable GBI
- to prove inconsistency of GDC, their proof is wrong, bu can be fixed by using Prop instead of bool. However, for inconsistency of GBI we need excluded middle.
- at the beginning of the paper, they say that BI intuitively allows the user to get an inductive tree, but this is not the case with GBI (see current insights above), so maybe our own MadeUpGBI can be useful?